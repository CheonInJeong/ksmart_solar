<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Config 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.cafe24.kangk0269.dao.MemberMapper">
	<resultMap type="MemberDTO" id="memberResultMap">
		<result property="mId" 					column="m_id"/>
		<result property="mPw" 					column="m_pw"/>
		<result property="kakaoId" 				column="m_id_kakao"/>
		<result property="mName" 				column="m_name"/>
		<result property="mLevel" 				column="m_level"/>
		<result property="mZipcode" 			column="m_zipcode"/>
		<result property="mAddr" 				column="m_addr"/>
		<result property="mDetailAddr" 			column="m_detail_addr"/>
		<result property="mPhone" 				column="m_phone"/>
		<result property="mEmail" 				column="m_email"/>
		<result property="mPhoto" 				column="m_photo"/>
		<result property="mSubDate" 			column="m_sub_date"/>
		<result property="mSubDateModify" 		column="m_sub_date_modify"/>
		<result property="mRestCheck" 			column="m_rest_check"/>
		<result property="mRevokeCheck" 		column="m_revoke_check"/>
		<result property="mRevokeDelayCheck" 	column="m_revoke_delay_check"/>
		<result property="mStateModifyDate" 	column="m_state_modify_date"/>
	</resultMap>
	<resultMap type="MemberKakao" id="memberKakaoResultMap">
		<result property="mId" 					column="m_id"/>
		<result property="mPw" 					column="m_pw"/>
		<result property="kakaoId" 				column="m_id_kakao"/>
		<result property="nickName" 			column="m_name"/>
		<result property="kakaoEmail" 			column="m_email"/>
		<result property="thumbnailImage" 		column="m_photo"/>
	</resultMap>
	
	<select id="getUri" parameterType="int" resultType="String">
		SELECT 
			i_uri
		FROM 
			tb_interceptor 
		WHERE 
			i_level = #{level}
	
	</select>
	
	<insert id="addMemberKakao" parameterType="MemberKakao">
		INSERT INTO tb_member(  
			 m_id
			,m_pw
			,m_id_kakao
			,m_name
			,m_level
			,m_email
			,m_photo
			,m_sub_date
		) VALUES (
			#{mId}
			,#{mPw}
			,#{kakaoId} 
			,#{nickName} 
			,4
			,#{kakaoEmail} 
			,#{thumbnailImage} 
			,NOW()
		);
	</insert>
	<select id="checkBusiness" resultType="String">
		SELECT
		 m.m_id,
		 b.bz_company_name,
		 b.bz_check,
		 COUNT(if(b.bz_check = 'Y', bz_code,null))
		FROM
			tb_member AS m
			LEFT JOIN 
			tb_business AS b
			ON 
			m.m_id = b.m_id
		GROUP BY m.m_id;
	</select>
	<!-- 전체회원계좌 조회 -->
	<select id="getAllBankAccount" resultType="MemberAccountDTO">
		SELECT 
			m_account_idx			AS mAccountIdx
			, m_id					AS mId
			, m_account_number		AS mAccountNumber
			, m_account_name		AS mAccountName
			, m_account_bank		AS mAccountBank
			, m_account_reg_date	AS mAccountRegDate
			, m_account_check		AS mAccountCheck
		FROM 
			tb_member_account
	</select>
	
	<!-- 탈퇴신청회원 조회 -->
	<select id="getWithdrawAdmitMember" resultType="MemberRevokeDTO">
		SELECT 
			m_revoke_idx			AS mRevokeIdx
			, m_id					AS mId
			, m_revoke_reason		AS mRevokeReason
			, m_revoke_date			AS mRevokeDate
			, m_revoke_cancel_date	AS mRevokeCancelDate
			, m_revoke_final_date	AS mRevokeFinalDate
		FROM 
			tb_member_revoke
		<trim prefix="WHERE" prefixOverrides="AND |OR ">
			<if test="searchKeyWAM == null or searchKeyWAM == ''.toString()">
				m_revoke_final_date IS NULL
			</if>
			<if test="searchKeyWAM != null and searchKeyWAM != ''.toString()">
				m_revoke_final_date IS NULL AND
				<choose>
					<when test="'m_revoke_date'.equals(searchKeyWAM)">
						m_revoke_date BETWEEN #{searchValueWAMS} AND #{searchValueWAMF}
					</when>
					<when test="'m_revoke_cancel_date'.equals(searchKeyWAM)">
						m_revoke_cancel_date BETWEEN #{searchValueWAMS} AND #{searchValueWAMF}
					</when>
					<otherwise>
						${searchKeyWAM} LIKE CONCAT ('%',#{searchValueWAM},'%')
					</otherwise>
				</choose>
			</if>
		</trim>
	</select>

	<!-- 탈퇴완료회원 조회 -->
	<select id="getWithdrawCompleteMember" resultType="MemberRevokeDTO">
		SELECT 
			m_revoke_idx			AS mRevokeIdx
			, m_id					AS mId
			, m_revoke_reason		AS mRevokeReason
			, m_revoke_date			AS mRevokeDate
			, m_revoke_cancel_date	AS mRevokeCancelDate
			, m_revoke_final_date	AS mRevokeFinalDate
		FROM 
			tb_member_revoke
		<trim prefix="WHERE" prefixOverrides="AND |OR ">
			<if test="searchKeyWCM == null or searchKeyWCM == ''.toString()">
				m_revoke_cancel_date IS NULL
			</if>
			<if test="searchKeyWCM != null and searchKeyWCM != ''.toString()">
				m_revoke_cancel_date IS NULL AND
				<choose>
					<when test="'m_revoke_date'.equals(searchKeyWCM)">
						m_revoke_date BETWEEN #{searchValueWCMS} AND #{searchValueWCMF}
					</when>
					<when test="'m_revoke_final_date'.equals(searchKeyWCM)">
						m_revoke_final_date BETWEEN #{searchValueWCMS} AND #{searchValueWCMF}
					</when>
					<otherwise>
						${searchKeyWCM} LIKE CONCAT ('%',#{searchValueWCM},'%')
					</otherwise>
				</choose>
			</if>
		</trim>
	</select>
	
	<!-- 로그인 기록 조회 -->
	<select id="getLoginHistory" resultType="map">
		SELECT 
			m_log_idx 	AS mLogIdx
			, m_id		AS mId
			, m_log_in	AS mLogIn
			, m_log_out	As mLogOut
		FROM 
			tb_member_log
		<trim prefix="WHERE" prefixOverrides="AND |OR ">
			<if test="searchKeyL != null and searchKeyL != ''.toString()">
				<choose>
					<when test="'m_log_in'.equals(searchKeyL)">
						m_log_in BETWEEN #{searchValueLS} AND #{searchValueLF}
					</when>
					<otherwise>
						${searchKeyL} LIKE CONCAT ('%',#{searchValueL},'%')
					</otherwise>
				</choose>
			</if>
		</trim>
	</select>
	
	<!-- 로그인 기록 리스트 수 조회 -->
	<select id="getLoginHistoryCnt" resultType="int" parameterType="String">
		SELECT 
			COUNT(*)
		FROM 
			tb_member_log
		<trim prefix="WHERE" prefixOverrides="AND |OR ">
			<if test="searchKeyL != null and searchKeyL != ''.toString()">
				<choose>
					<when test="'m_log_in'.equals(searchKeyL)">
						m_log_in BETWEEN #{searchValueLS} AND #{searchValueLF}
					</when>
					<otherwise>
						${searchKeyL} LIKE CONCAT ('%',#{searchValueL},'%')
					</otherwise>
				</choose>
			</if>
		</trim>
	</select>

	<!-- 전체 회원정보수정  -->
	<update id="modifyMember" parameterType="MemberDTO">
		UPDATE tb_member
		SET
			m_id = #{mId},
			m_pw = #{mPw},
			m_name = #{mName},
			m_level = #{mLevel},
			m_zipcode = #{mZipcode},
			m_addr = #{mAddr},
			m_detail_addr = #{mDetailAddr},
			m_phone = #{mPhone},
			m_email = #{mEmail},
			m_sub_date_modify = NOW()
		WHERE 
			m_id = #{mId}
	</update>
	
	<!-- 개인 비밀번호수정 -->
	<update id="modifyPw" parameterType="string">
		UPDATE tb_member
		SET
			m_pw = #{newPw}
		WHERE 
			m_id = #{login_id}
	</update>
	
	<!-- 개인 프로필 수정처리  -->
	<update id="modifyMyInfo" parameterType="String">
		UPDATE tb_member
		SET
			m_name = #{mName},
			m_zipcode = #{mZipcode},
			m_addr = #{mAddr},
			m_detail_addr = #{mDetailAddr},
			m_phone = #{mPhone},
			m_email = #{mEmail},
			m_photo = #{mPhoto},
			m_sub_date_modify = NOW()
		WHERE 
			m_id = #{mId}
	</update>
	
	<!-- 개인 회원조회 -->
	<select id="getMyInfoById" parameterType="String" resultMap="memberResultMap">
		SELECT 
		  	 m_id
			,m_pw
			,m_name
			,m_level
			,m_zipcode
			,m_addr
			,m_detail_addr
			,m_phone
			,m_email
			,m_photo
			,m_sub_date
			,m_sub_date_modify
			,m_rest_check
			,m_revoke_check
			,m_revoke_delay_check
			,m_state_modify_date    
		FROM
		   tb_member
		WHERE
		   m_id = #{login_id};
	
	</select>
	
	<insert id="addMember" parameterType="MemberDTO">
		INSERT INTO tb_member(  
			 m_id
			,m_pw
			,m_name
			,m_level
			,m_zipcode
			,m_addr
			,m_detail_addr
			,m_phone
			,m_email
			,m_photo
			,m_sub_date
		) VALUES (
			#{mId} 
			,#{mPw} 
			,#{mName} 
			,4
			,#{mZipcode} 
			,#{mAddr} 
			,#{mDetailAddr} 
			,#{mPhone} 
			,#{mEmail} 
			,#{mPhoto} 
			,NOW()
		);
	</insert>
	<select id="getMemberInfoById" parameterType="String" resultMap="memberResultMap">
		SELECT 
		  	 m_id
			,m_pw
			,m_name
			,m_level
			,m_zipcode
			,m_addr
			,m_detail_addr
			,m_phone
			,m_email
			,m_photo
			,m_sub_date
			,m_sub_date_modify
			,m_rest_check
			,m_revoke_check
			,m_revoke_delay_check
			,m_state_modify_date    
		FROM
		   tb_member
		WHERE
		   m_id = #{mId};
	</select>
	
	<!-- 활동회원조회 -->
	<select id="getActiveMember" parameterType="String" resultMap="memberResultMap">
		SELECT 
			m_id
			, m_pw
			, m_id_kakao
			, m_name
			, a.m_level
			, m_zipcode
			, m_addr
			, m_detail_addr
			, m_phone
			, m_email
			, m_photo
			, m_sub_date
			, m_sub_date_modify
			, m_rest_check
			, m_revoke_check
			, m_revoke_delay_check
			, m_state_modify_date
		FROM 
			tb_member AS a
			INNER join
			tb_member_level AS b
			ON 
			a.m_level = b.m_level
		<trim prefix="WHERE" prefixOverrides="AND |OR ">
			<if test="searchKeyAM == null or searchKeyAM == ''.toString()">
				a.m_rest_check = 'N' AND a.m_revoke_check = 'N' AND a.m_revoke_delay_check = 'N'
			</if>
			<if test="searchKeyAM != null and searchKeyAM != ''.toString()">
				a.m_rest_check = 'N' AND a.m_revoke_check = 'N' AND a.m_revoke_delay_check = 'N' AND
				<choose>
					<when test="'m_level'.equals(searchKeyAM)">
						b.m_level_name LIKE CONCAT('%',#{searchValueAM},'%')
					</when>
					<otherwise>
						${searchKeyAM} LIKE CONCAT('%',#{searchValueAM},'%')
					</otherwise>
				</choose>
			</if>
		</trim>
	</select>
	
	<!-- 휴면회원조회 -->
	<select id="getRestMember" parameterType="String" resultMap="memberResultMap">
		SELECT 
			m_id
			, m_pw
			, m_id_kakao
			, m_name
			, a.m_level
			, m_zipcode
			, m_addr
			, m_detail_addr
			, m_phone
			, m_email
			, m_photo
			, m_sub_date
			, m_sub_date_modify
			, m_rest_check
			, m_revoke_check
			, m_revoke_delay_check
			, m_state_modify_date
		FROM 
			tb_member AS a
			INNER join
			tb_member_level AS b
			ON 
			a.m_level = b.m_level
		<trim prefix="WHERE" prefixOverrides="AND |OR ">
			<if test="searchKeyRM == null or searchKeyRM == ''.toString()">
				a.m_rest_check = 'Y'
			</if>
			<if test="searchKeyRM != null and searchKeyRM != ''.toString()">
				a.m_rest_check = 'Y' AND
				<choose>
					<when test="'m_level'.equals(searchKeyRM)">
						b.m_level_name LIKE CONCAT('%',#{searchValueRM},'%')
					</when>
					<otherwise>
						${searchKeyRM} LIKE CONCAT('%',#{searchValueRM},'%')
					</otherwise>
				</choose>
			</if>
		</trim>
	</select>
	
	<select id="getManager" resultType="String">
		SELECT 
			m_id
		FROM 
			tb_member
		WHERE
			m_level=1;
	</select>
</mapper>