<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Config 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.cafe24.kangk0269.dao.TradeMapper">
	<resultMap type="TradeDepositOutDTO" id="depositoutResultMap">
		<result property="trDepCode" 			column="tr_dep_code"/>
		<result property="bCode" 				column="b_code"/>
		<result property="mId" 					column="m_id"/>
		<result property="bDeposit" 			column="b_deposit"/>
		<result property="trDepDeposit" 		column="tr_dep_deposit"/>
		<result property="mAccountBankName" 	column="m_account_bank_name"/>
		<result property="mAccountNumber" 		column="m_account_number"/>
		<result property="trDepAccountCheck" 	column="tr_dep_account_check"/>
		<result property="mAccountName" 		column="m_account_name"/>
		<result property="trDepDate" 			column="tr_dep_date"/>
		<result property="trDepCheck" 			column="tr_dep_check"/>
		<result property="trDepWdDate" 			column="tr_dep_wd_date"/>
		<result property="bMoCode" 				column="b_mo_code"/>
	</resultMap>
	
	<resultMap type="TradePaymentOutDTO" id="paymentoutResultMap">
		<result property="trPayoutCode" 		column="tr_payout_code"/>
		<result property="trPrCode" 			column="tr_pr_code"/>
		<result property="mId" 					column="m_id"/>
		<result property="trPayoutPrice" 		column="tr_payout_price"/>
		<result property="sCommissionRate" 		column="s_commission_rate"/>
		<result property="cTradeCm" 			column="c_trade_cm"/>
		<result property="trPayoutPriceReal" 	column="tr_payout_price_real"/>
		<result property="trPayoutBank" 		column="tr_payout_bank"/>
		<result property="trPayoutAccount" 		column="tr_payout_account"/>
		<result property="trPayoutAccountCheck" column="tr_payout_account_check"/>
		<result property="trPayoutAccountName" 	column="tr_payout_account_name"/>
		<result property="trPayoutDate" 		column="tr_payout_date"/>
		<result property="trPayoutCheck" 		column="tr_payout_check"/>
		<result property="trPayoutWdDate" 		column="tr_payout_wd_date"/>
		<result property="bMoCode" 				column="b_mo_code"/>
	</resultMap>
	<resultMap type="TradePaymentInDTO" id="paymentInMap">
		<result property="trPayinCode" 				column="tr_payin_code"/>
		<result property="trPrCode" 				column="tr_pr_code"/>
		<result property="bCode" 					column="b_code"/>
		<result property="announcedCode" 			column="announced_code"/>
		<result property="mIdSeller" 				column="m_id_seller"/>
		<result property="mIdBuyer" 				column="m_id_buyer"/>
		<result property="bPrice" 					column="b_price"/>
		<result property="sDepositRate" 			column="s_deposit_rate"/>
		<result property="bDeposit" 				column="b_deposit"/>
		<result property="trPayinPrice" 			column="tr_payin_price"/>
		<result property="sCommissionRate" 			column="s_commission_rate"/>
		<result property="cTradeCm" 				column="c_trade_cm"/>
		<result property="trPayinDate1" 			column="tr_payin_date1"/>
		<result property="trPayinDate2" 			column="tr_payin_date2"/>
		<result property="trPayinCheck" 			column="tr_payin_check"/>
		<result property="bMoCode" 					column="b_mo_code"/>
		<result property="bMoDate" 					column="b_mo_date"/>
		<result property="trPayinStatus" 			column="tr_payin_status"/>
		<result property="mAccountBankName" 		column="m_account_bank_name"/>
		<result property="mAccountNumber" 			column="m_account_number"/>
		<result property="mPaymentName" 			column="m_payment_name"/>
	</resultMap>
	
	<resultMap type="TradePriorityDTO" id="tradePriorityResultMap">
		<result property="trPrCode" column="tr_pr_code"/>
		<result property="bCode" column="b_code"/>
		<result property="bTypeCode" column="b_type_code"/>
		<result property="announcedCode" column="announced_code"/>
		<result property="announcedTitle" column="announced_title"/>
		<result property="bGroupcode" column="b_group_code"/>
		<result property="mIdSeller" column="m_id_seller"/>
		<result property="mIdBuyer" column="m_id_buyer"/>
		<result property="trPrRank" column="tr_pr_rank"/>
		<result property="trPrPrice" column="tr_pr_price"/>
		<result property="sDepositRate" column="s_deposit_rate"/>
		<result property="bDeposit" column="b_deposit"/>
		<result property="trPrConclusionDate1" column="tr_pr_conclusion_date1"/>
		<result property="trPrConclusionDate2" column="tr_pr_conclusion_date2"/>
		<result property="trTypeCode" column="tr_type_code"/>
		<result property="trTypeName" column="tr_type_name"/>
		<result property="trPrDateUp" column="tr_pr_date_up"/>
		<result property="trPayoutCheck" column="tr_payout_check"/>
	</resultMap>
	
	<!-- 월말정산 조회 -->
	<select id="getCalculateList" resultType="TradeFailDTO">
		SELECT
			SUM(cancelTotal)		AS 'failTotal'
			,SUM(successTotal)		AS 'sucTotal'
			,SUM(commissionTotal)	AS 'cmTotal'
			,result.ym				AS 'ymDate'
			,result.last			AS 'last'
		FROM
				(
				SELECT
					SUM(bCancel)	AS 'cancelTotal'
					, 0 AS 'successTotal'
					,SUM(bCancel)	AS 'commissionTotal'
					,DATE_FORMAT(trFailDate,'%y년 %m월') AS 'ym'
					,LAST_DAY(trFailDate) AS 'last'
				FROM
					(SELECT
						a.tr_pr_code					AS relatedCode
						,'낙찰'							AS trFailType
						, a.m_id_buyer					AS mId
						, if(a.b_type_code=1,'발전소','부품')				AS bType
						, a.announced_code			AS announcedCode
						, a.announced_title			AS announcedTitle
						, a.tr_pr_price				AS trFailBasis
						, a.s_deposit_rate			AS bCancelRate
						, a.b_deposit					AS bCancel
						, a.tr_pr_date_up				AS trFailDate
						, b.m_account_bank_name		AS bankName
						, b.m_account_number			AS accountNumber
						, b.m_payment_name			AS paymentName
					FROM
						tb_trade_priority AS a
						INNER JOIN 
						tb_bid_list AS b
						ON 
						a.b_code = b.b_code
					WHERE a.tr_type_code = 8
					UNION ALL
					SELECT
						a.tr_payin_code				AS relatedCode
						, '대금'							AS trFailType
						, a.m_id_buyer					AS mId
						, if(b.b_type_code=1,'발전소','부품')				AS bType
						, a.announced_code			AS announcedCode
						, b.b_title						AS announcedTitle
						, a.b_price						AS trFailBasis
						, b.s_dep_rate					AS bCancelRate
						, b.b_deposit					AS bCancel
						, b.b_date_up					AS trFailDate
						, b.m_account_bank_name		AS bankName
						, b.m_account_number			AS accountNumber
						, b.m_payment_name			AS paymentName
					FROM
						tb_trade_payment_in AS a
						INNER JOIN 
						tb_bid_list AS b
						ON 
						a.b_code = b.b_code
					WHERE a.tr_payin_status = '미납') AS r1
				GROUP BY DATE_FORMAT(trFailDate,'%y%m')
				UNION
				SELECT
					0 AS 'cancelTotal'
					,SUM(o.c_trade_cm)	AS 'successTotal'
					,SUM(o.c_trade_cm)	AS 'commissionTotal'
					,DATE_FORMAT(i.b_mo_date,'%y년 %m월')	AS 'ym'
					,LAST_DAY(i.b_mo_date)	AS 'last'
				FROM
					tb_trade_payment_out AS o
					LEFT join
					tb_trade_priority AS r
					ON 
					o.tr_pr_code = r.tr_pr_code
					LEFT JOIN 
					tb_trade_payment_in AS i
					ON 
					r.tr_pr_code = i.tr_pr_code
				GROUP BY DATE_FORMAT(i.b_mo_date,'%y%m')
				) AS result
		GROUP BY ym
		LIMIT #{start},#{end}
	</select>

	<!-- 월말정산 리스트 수 조회 -->
	<select id="getCalculateListCnt" resultType="int">
		SELECT
			COUNT(*)
		FROM
			(SELECT
				SUM(cancelTotal)		AS 'failTotal'
				,SUM(successTotal)		AS 'sucTotal'
				,SUM(commissionTotal)	AS 'cmTotal'
				,result.ym				AS 'ymDate'
				,result.last			AS 'last'
			FROM
					(
					SELECT
						SUM(bCancel)	AS 'cancelTotal'
						, 0 AS 'successTotal'
						,SUM(bCancel)	AS 'commissionTotal'
						,DATE_FORMAT(trFailDate,'%y년 %m월') AS 'ym'
						,LAST_DAY(trFailDate) AS 'last'
					FROM
						(SELECT
							a.tr_pr_code					AS relatedCode
							,'낙찰'							AS trFailType
							, a.m_id_buyer					AS mId
							, if(a.b_type_code=1,'발전소','부품')				AS bType
							, a.announced_code			AS announcedCode
							, a.announced_title			AS announcedTitle
							, a.tr_pr_price				AS trFailBasis
							, a.s_deposit_rate			AS bCancelRate
							, a.b_deposit					AS bCancel
							, a.tr_pr_date_up				AS trFailDate
							, b.m_account_bank_name		AS bankName
							, b.m_account_number			AS accountNumber
							, b.m_payment_name			AS paymentName
						FROM
							tb_trade_priority AS a
							INNER JOIN 
							tb_bid_list AS b
							ON 
							a.b_code = b.b_code
						WHERE a.tr_type_code = 8
						UNION ALL
						SELECT
							a.tr_payin_code				AS relatedCode
							, '대금'							AS trFailType
							, a.m_id_buyer					AS mId
							, if(b.b_type_code=1,'발전소','부품')				AS bType
							, a.announced_code			AS announcedCode
							, b.b_title						AS announcedTitle
							, a.b_price						AS trFailBasis
							, b.s_dep_rate					AS bCancelRate
							, b.b_deposit					AS bCancel
							, b.b_date_up					AS trFailDate
							, b.m_account_bank_name		AS bankName
							, b.m_account_number			AS accountNumber
							, b.m_payment_name			AS paymentName
						FROM
							tb_trade_payment_in AS a
							INNER JOIN 
							tb_bid_list AS b
							ON 
							a.b_code = b.b_code
						WHERE a.tr_payin_status = '미납') AS r1
					GROUP BY DATE_FORMAT(trFailDate,'%y%m')
					UNION
					SELECT
						0 AS 'cancelTotal'
						,SUM(o.c_trade_cm)	AS 'successTotal'
						,SUM(o.c_trade_cm)	AS 'commissionTotal'
						,DATE_FORMAT(i.b_mo_date,'%y년 %m월')	AS 'ym'
						,LAST_DAY(i.b_mo_date)	AS 'last'
					FROM
						tb_trade_payment_out AS o
						LEFT join
						tb_trade_priority AS r
						ON 
						o.tr_pr_code = r.tr_pr_code
						LEFT JOIN 
						tb_trade_payment_in AS i
						ON 
						r.tr_pr_code = i.tr_pr_code
					GROUP BY DATE_FORMAT(i.b_mo_date,'%y%m')
					) AS result
			GROUP BY ym) AS result2
	</select>
	
	<!-- 월별 수수료 상세정보 -->
	<select id="getCalculateMonth" resultType="TradeFailDTO" parameterType="String">
		SELECT
			id 				AS id
			, money			AS money
			, inputDate		AS inputDate
			, Type AS type
		FROM 
			(SELECT
				a.mId				AS id
				, a.bCancel		AS money
				, a.trFailDate	AS inputDate
				, '취소'	AS Type
			FROM
				(
				SELECT
					a.tr_pr_code					AS relatedCode
					,'낙찰'							AS trFailType
					, a.m_id_buyer					AS mId
					, if(a.b_type_code=1,'발전소','부품')				AS bType
					, a.announced_code			AS announcedCode
					, a.announced_title			AS announcedTitle
					, a.tr_pr_price				AS trFailBasis
					, a.s_deposit_rate			AS bCancelRate
					, a.b_deposit					AS bCancel
					, a.tr_pr_date_up				AS trFailDate
					, b.m_account_bank_name		AS bankName
					, b.m_account_number			AS accountNumber
					, b.m_payment_name			AS paymentName
				FROM
					tb_trade_priority AS a
					INNER JOIN 
					tb_bid_list AS b
					ON 
					a.b_code = b.b_code
				WHERE a.tr_type_code = 8
				UNION ALL
				SELECT
					a.tr_payin_code				AS relatedCode
					, '대금'							AS trFailType
					, a.m_id_buyer					AS mId
					, if(b.b_type_code=1,'발전소','부품')				AS bType
					, a.announced_code			AS announcedCode
					, b.b_title						AS announcedTitle
					, a.b_price						AS trFailBasis
					, b.s_dep_rate					AS bCancelRate
					, b.b_deposit					AS bCancel
					, b.b_date_up					AS trFailDate
					, b.m_account_bank_name		AS bankName
					, b.m_account_number			AS accountNumber
					, b.m_payment_name			AS paymentName
				FROM
					tb_trade_payment_in AS a
					INNER JOIN 
					tb_bid_list AS b
					ON 
					a.b_code = b.b_code
				WHERE a.tr_payin_status = '미납'
				) AS a
			UNION ALL 
			SELECT 
				b.m_id		AS id
				, b.c_trade_cm		AS money
				, c.b_mo_date		AS inputDate
				, '대금'				AS Type
			FROM
				tb_trade_payment_out AS b
				LEFT JOIN 
				tb_trade_payment_in AS c
				ON 
				b.tr_pr_code = c.tr_pr_code) AS result
		WHERE inputDate BETWEEN ADDDATE((SUBDATE(LAST_DAY(#{lastDate}),INTERVAL 1 MONTH)),INTERVAL 1 DAY) AND #{lastDate}
		ORDER BY inputDate;
	</select>
	
	<!-- 거래수수료목록 -->
	<select id="getSuccessCommission" resultMap="paymentoutResultMap">
		SELECT 
			r.announced_code AS announcedCode
			, r.announced_title AS announcedTitle
			, if(r.b_type_code=1,'발전소','부품') AS bType
			, m_id
			, o.c_trade_cm
			, i.b_mo_date	AS bMoDate
		FROM 
			tb_trade_payment_out AS o
			LEFT join
			tb_trade_priority AS r
			ON 
			o.tr_pr_code = r.tr_pr_code
			LEFT JOIN 
			tb_trade_payment_in AS i
			ON 
			r.tr_pr_code = i.tr_pr_code
		<if test="searchKey == null or searchKey == ''.toString()">
			ORDER BY i.b_mo_date
			LIMIT #{start},#{end}
		</if>
		<trim prefix="WHERE" prefixOverrides="AND |OR ">
			<if test="searchKey != null and searchKey != ''.toString()">
				${searchKey} LIKE CONCAT('%',#{searchValue},'%')
				ORDER BY i.b_mo_date
				LIMIT #{start},#{end}
			</if>
		</trim>
	</select>
	
	<!-- 거래수수료 리스트 수 -->
	<select id="getSuccessCommissionCnt" resultType="int">
		SELECT 
			COUNT(*)
		FROM 
			tb_trade_payment_out AS o
			LEFT join
			tb_trade_priority AS r
			ON 
			o.tr_pr_code = r.tr_pr_code
			LEFT JOIN 
			tb_trade_payment_in AS i
			ON 
			r.tr_pr_code = i.tr_pr_code
		<trim prefix="WHERE" prefixOverrides="AND |OR ">
			<if test="searchKey != null and searchKey != ''.toString()">
				${searchKey} LIKE CONCAT('%',#{searchValue},'%')
			</if>
		</trim>
	</select>

	<!-- 취소수수료목록 -->
	<select id="getFailCommission" resultType="TradeFailDTO">
		SELECT
			relatedCode
			, trFailType
			, mId
			, bType
			, announcedCode
			, announcedTitle
			, trFailBasis
			, bCancelRate
			, bCancel
			, trFailDate
			, bankName
			, accountNumber
			, paymentName
		FROM
			(SELECT
				a.tr_pr_code					AS relatedCode
				,'낙찰'							AS trFailType
				, a.m_id_buyer					AS mId
				, if(a.b_type_code=1,'발전소','부품')				AS bType
				, a.announced_code			AS announcedCode
				, a.announced_title			AS announcedTitle
				, a.tr_pr_price				AS trFailBasis
				, a.s_deposit_rate			AS bCancelRate
				, a.b_deposit					AS bCancel
				, a.tr_pr_date_up				AS trFailDate
				, b.m_account_bank_name		AS bankName
				, b.m_account_number			AS accountNumber
				, b.m_payment_name			AS paymentName
			FROM
				tb_trade_priority AS a
				INNER JOIN 
				tb_bid_list AS b
				ON 
				a.b_code = b.b_code
			WHERE a.tr_type_code = 8
			UNION ALL
			SELECT
				a.tr_payin_code				AS relatedCode
				, '대금'							AS trFailType
				, a.m_id_buyer					AS mId
				, if(b.b_type_code=1,'발전소','부품')				AS bType
				, a.announced_code			AS announcedCode
				, b.b_title						AS announcedTitle
				, a.b_price						AS trFailBasis
				, b.s_dep_rate					AS bCancelRate
				, b.b_deposit					AS bCancel
				, b.b_date_up					AS trFailDate
				, b.m_account_bank_name		AS bankName
				, b.m_account_number			AS accountNumber
				, b.m_payment_name			AS paymentName
			FROM
				tb_trade_payment_in AS a
				INNER JOIN 
				tb_bid_list AS b
				ON 
				a.b_code = b.b_code
			WHERE a.tr_payin_status = '미납') AS r
		<if test="searchKey == null or searchKey == ''.toString()">
			ORDER BY trFailDate
			LIMIT #{start},#{end}
		</if>
		<trim prefix="WHERE" prefixOverrides="AND |OR ">
			<if test="searchKey != null and searchKey != ''.toString()">
				${searchKey} LIKE CONCAT('%',#{searchValue},'%')
				ORDER BY trFailDate
				LIMIT #{start},#{end}
			</if>
		</trim>
	</select>
	
	<!-- 취소수수료 리스트 수 -->
	<select id="getFailCommissionCnt" resultType="int">
		SELECT
			COUNT(*)
		FROM
			(SELECT
				a.tr_pr_code					AS relatedCode
				,'낙찰'							AS trFailType
				, a.m_id_buyer					AS mId
				, if(a.b_type_code=1,'발전소','부품')				AS bType
				, a.announced_code			AS announcedCode
				, a.announced_title			AS announcedTitle
				, a.tr_pr_price				AS trFailBasis
				, a.s_deposit_rate			AS bCancelRate
				, a.b_deposit					AS bCancel
				, a.tr_pr_date_up				AS trFailDate
				, b.m_account_bank_name		AS bankName
				, b.m_account_number			AS accountNumber
				, b.m_payment_name			AS paymentName
			FROM
				tb_trade_priority AS a
				INNER JOIN 
				tb_bid_list AS b
				ON 
				a.b_code = b.b_code
			WHERE a.tr_type_code = 8
			UNION ALL
			SELECT
				a.tr_payin_code				AS relatedCode
				, '대금'							AS trFailType
				, a.m_id_buyer					AS mId
				, if(b.b_type_code=1,'발전소','부품')				AS bType
				, a.announced_code			AS announcedCode
				, b.b_title						AS announcedTitle
				, a.b_price						AS trFailBasis
				, b.s_dep_rate					AS bCancelRate
				, b.b_deposit					AS bCancel
				, b.b_date_up					AS trFailDate
				, b.m_account_bank_name		AS bankName
				, b.m_account_number			AS accountNumber
				, b.m_payment_name			AS paymentName
			FROM
				tb_trade_payment_in AS a
				INNER JOIN 
				tb_bid_list AS b
				ON 
				a.b_code = b.b_code
			WHERE a.tr_payin_status = '미납') AS r
		<trim prefix="WHERE" prefixOverrides="AND |OR ">
			<if test="searchKey != null and searchKey != ''.toString()">
				${searchKey} LIKE CONCAT('%',#{searchValue},'%')
			</if>
		</trim>
	</select>
	
	<!-- 거래대금 출금 계좌확인 -->
	<update id="paymentoutAccountCheck" parameterType="String">
		UPDATE tb_trade_payment_out
		SET
			tr_payout_account_check = 'Y'
		WHERE tr_payout_code = #{Code}
	</update>
	
	<!-- 거래대금 출금(거래대금 출금신청 테이블 변경) -->
	<update id="paymentoutWithdraw" parameterType="String">
		UPDATE tb_trade_payment_out
		SET
			tr_payout_check='Y',
			tr_payout_wd_date=NOW()
		WHERE tr_payout_code = #{Code}
	</update>
	
	<!-- 거래대금 출금신청 상세조회 -->
	<select id="getPaymentOut" resultMap="paymentoutResultMap" parameterType="String">
		SELECT 
			tr_payout_code
			, a.tr_pr_code
			, m_id
			, b.announced_code	AS announcedCode
			, b.announced_title	AS announcedTitle
			, if(b.b_type_code=1,'발전소','부품') AS bType
			, tr_payout_price
			, s_commission_rate
			, c_trade_cm
			, tr_payout_price_real
			, tr_payout_bank
			, tr_payout_account
			, tr_payout_account_check
			, tr_payout_account_name
			, tr_payout_date
			, a.tr_payout_check
			, tr_payout_wd_date
			, b_mo_code
		FROM 
			tb_trade_payment_out AS a
			LEFT JOIN 
			tb_trade_priority AS b
			ON 
			a.tr_pr_code = b.tr_pr_code
		WHERE tr_payout_code = #{Code}
	</select>
		
	<!-- 거래대금출금신청목록 -->
	<select id="getPaymentOutList" resultMap="paymentoutResultMap">
		SELECT 
			tr_payout_code
			, a.tr_pr_code
			, m_id
			, b.announced_code	AS announcedCode
			, b.announced_title	AS announcedTitle
			, if(b.b_type_code=1,'발전소','부품') AS bType
			, tr_payout_price
			, s_commission_rate
			, c_trade_cm
			, tr_payout_price_real
			, tr_payout_bank
			, tr_payout_account
			, tr_payout_account_check
			, tr_payout_account_name
			, tr_payout_date
			, a.tr_payout_check
			, tr_payout_wd_date
			, b_mo_code
		FROM 
			tb_trade_payment_out AS a
			LEFT JOIN 
			tb_trade_priority AS b
			ON 
			a.tr_pr_code = b.tr_pr_code
		<if test="searchKey == null or searchKey == ''.toString()">
			LIMIT #{start},#{end}
		</if>
		<trim prefix="WHERE" prefixOverrides="AND |OR ">
			<if test="searchKey != null and searchKey != ''.toString()">
				${searchKey} LIKE CONCAT('%',#{searchValue},'%')
				LIMIT #{start},#{end}
			</if>
		</trim>
	</select>
	
	<!-- 거래대금출금신청 리스트 수 조회 -->
	<select id="getPaymentOutListCnt" resultType="int">
		SELECT 
			COUNT(*)
		FROM 
			tb_trade_payment_out AS a
			LEFT JOIN 
			tb_trade_priority AS b
			ON 
			a.tr_pr_code = b.tr_pr_code
		<trim prefix="WHERE" prefixOverrides="AND |OR ">
			<if test="searchKey != null and searchKey != ''.toString()">
				${searchKey} LIKE CONCAT('%',#{searchValue},'%')
			</if>
		</trim>
	</select>
	
	<!-- 예치금 출금 계좌확인 -->
	<update id="depositAccountCheck" parameterType="String">
		UPDATE tb_trade_deposit_out
		SET
			tr_dep_account_check='Y'
		WHERE tr_dep_code=#{Code}
	</update>
	
	<!-- 예치금 출금(예치금 출금신청 테이블 변경) -->
	<update id="depositWithdraw1" parameterType="String">
		UPDATE tb_trade_deposit_out
		SET
			tr_dep_check = 'Y',
			tr_dep_wd_date = NOW()
		WHERE tr_dep_code = #{Code}
	</update>
	
	<!-- 예치금 출금(입찰자 테이블 변경) -->
	<update id="depositWithdraw2" parameterType="String">
		UPDATE tb_bid_list
		SET
			b_deposit_available='N',
			b_deposit_refund='Y'
		WHERE b_code=#{bCode}
	</update>
	
	
	<!-- 예치금 출금신청 상세조회 -->
	<select id="getDepositOut" resultMap="depositoutResultMap" parameterType="String">
		SELECT 
			tr_dep_code
			, a.b_code
			, a.m_id
			, b.announced_code					AS announcedCode
			, b.b_title							AS bTitle
			, if(b.b_type_code=1,'발전소','부품')	AS bTypeCode
			, a.b_deposit
			, tr_dep_deposit
			, a.m_account_bank_name
			, a.m_account_number
			, tr_dep_account_check
			, m_account_name
			, tr_dep_date
			, tr_dep_check
			, tr_dep_wd_date
			, a.b_mo_code
		FROM 
			tb_trade_deposit_out AS a
			LEFT JOIN
			tb_bid_list AS b
			ON 
			a.b_code = b.b_code
		WHERE tr_dep_code=#{Code}
	</select>
	
	<!-- 예치금출금신청목록 -->
	<select id="getDepositOutList" resultMap="depositoutResultMap">
		SELECT 
			tr_dep_code
			, a.b_code
			, a.m_id
			, b.announced_code					AS announcedCode
			, b.b_title							AS bTitle
			, if(b.b_type_code=1,'발전소','부품')	AS bTypeCode
			, a.b_deposit
			, tr_dep_deposit
			, a.m_account_bank_name
			, a.m_account_number
			, tr_dep_account_check
			, m_account_name
			, tr_dep_date
			, tr_dep_check
			, tr_dep_wd_date
			, a.b_mo_code
		FROM 
			tb_trade_deposit_out AS a
			LEFT JOIN
			tb_bid_list AS b
			ON 
			a.b_code = b.b_code
		<if test="searchKey == null or searchKey == ''.toString()">
			LIMIT #{start},#{end}
		</if>
		<trim prefix="WHERE" prefixOverrides="AND |OR ">
			<if test="searchKey != null and searchKey != ''.toString()">
				<choose>
					<when test="'mId'.equals(searchKey)">
						a.m_id LIKE CONCAT('%',#{searchValue},'%')
					</when>
					<otherwise>
						${searchKey} LIKE CONCAT('%',#{searchValue},'%')
					</otherwise>
				</choose>
				LIMIT #{start},#{end}
			</if>
		</trim>
	</select>
	
	<!-- 예치금출금신청 리스트 수 -->
	<select id="getDepositOutListCnt" resultType="int">
		SELECT 
			COUNT(*)
		FROM 
			tb_trade_deposit_out AS a
			LEFT JOIN
			tb_bid_list AS b
			ON 
			a.b_code = b.b_code
		<trim prefix="WHERE" prefixOverrides="AND |OR ">
			<if test="searchKey != null and searchKey != ''.toString()">
				<choose>
					<when test="'mId'.equals(searchKey)">
						a.m_id LIKE CONCAT('%',#{searchValue},'%')
					</when>
					<otherwise>
						${searchKey} LIKE CONCAT('%',#{searchValue},'%')
					</otherwise>
				</choose>
			</if>
		</trim>
	</select>
	
	<!-- 낙찰자 테이블 낙찰코드로 상세조회 -->
	<select id="getPriByPrCode" resultMap="tradePriorityResultMap" parameterType="String">
		SELECT 
			tr_pr_code
			, b_code
			, b_type_code
			, announced_code
			, announced_title
			, b_groupcode
			, m_id_seller
			, m_id_buyer
			, tr_pr_rank
			, tr_pr_price
			, s_deposit_rate
			, b_deposit
			, tr_pr_conclusion_date1
			, tr_pr_conclusion_date2
			, tr_type_code
			, tr_type_name
			, tr_pr_date_up
			, tr_payout_check
		FROM 
			tb_trade_priority
		WHERE tr_pr_code = #{prCode}
	</select>
	
	<!-- 거래대금 납부 납부코드로 상세조회 -->
	<select id="getPayInByPayInCode" resultMap="paymentInMap" parameterType="String">
		SELECT 
			tr_payin_code
			, tr_pr_code
			, b_code
			, announced_code
			, m_id_seller
			, m_id_buyer
			, b_price
			, s_deposit_rate
			, b_deposit
			, tr_payin_price
			, s_commission_rate
			, c_trade_cm
			, tr_payin_date1
			, tr_payin_date2
			, tr_payin_check
			, b_mo_code
			, b_mo_date
			, tr_payin_status
			, m_account_bank_name
			, m_account_number
			, m_payment_name
		FROM 
			tb_trade_payment_in
		WHERE tr_payin_code = #{payInCode}
	</select>
	
	<!-- 대금납부 정보 -->
	<select id="getTradePaymentIn" parameterType="String" resultMap="paymentInMap">
		SELECT
			tr_payin_code, 
			tr_pr_code, 
			b_code, 
			announced_code, 
			m_id_seller, 
			m_id_buyer, 
			b_price, 
			s_deposit_rate, 
			b_deposit, 
			tr_payin_price, 
			s_commission_rate, 
			c_trade_cm, 
			tr_payin_date1, 
			tr_payin_date2, 
			tr_payin_check, 
			b_mo_code, 
			b_mo_date, 
			tr_payin_status,
			m_account_bank_name,
			m_account_number,
			m_payment_name
		FROM
			tb_trade_payment_in AS tp
		WHERE
			b_code = #{bCode}
	</select>
	<update id="modifyTradePaymentIn" parameterType="TradePaymentInDTO">
		UPDATE tb_trade_payment_in
		SET
			m_account_bank_name=#{mAccountBankName},
			m_account_number=#{mAccountNumber},
			m_payment_name=#{mPaymentName}
		WHERE 
			b_code=#{bCode}
	</update>
	<insert id="addRefundRequest" parameterType="TradeDepositOutDTO">
		INSERT INTO tb_trade_deposit_out
			(tr_dep_code, 
			 b_code, 
			 m_id, 
			 b_deposit, 
			 tr_dep_deposit, 
			 m_account_bank_name, 
			 m_account_number, 
			 m_account_name, 
			 tr_dep_date)
		VALUES 
			(sf_tr_dep_code(), 
			 #{bCode}, 
			 #{mId}, 
			 #{bDeposit}, 
			 #{bDeposit}, 
			 #{mAccountBankName}, 
			 #{mAccountNumber}, 
			 #{mAccountName}, 
			 NOW())
	</insert>
	<select id="getRefundInfo" parameterType="String" resultMap="depositoutResultMap">
		SELECT 
			tr_dep_code, 
			b_code, 
			m_id, 
			b_deposit, 
			tr_dep_deposit, 
			m_account_bank_name, 
			m_account_number, 
			tr_dep_account_check, 
			m_account_name, 
			tr_dep_date, 
			tr_dep_check, 
			tr_dep_wd_date, 
			b_mo_code
		FROM tb_trade_deposit_out
		WHERE
			b_code=#{bCode}
	</select>
	<insert id="addTradePriority" parameterType="map">
			INSERT INTO tb_trade_priority
				(tr_pr_code, 
				b_code,
				b_type_code, 
				announced_code,
				announced_title, 
				b_groupcode, 
				m_id_seller, 
				m_id_buyer, 
				tr_pr_rank, 
				tr_pr_price, 
				s_deposit_rate, 
				b_deposit, 
				tr_pr_conclusion_date1, 
				tr_pr_conclusion_date2,
				tr_pr_date_up)
			VALUES
			<if test="BidPlantTradeList!=null">
				(sf_tr_pr_code(), 
				#{BidPlantTradeList.bidListDTO.bCode}, 
				#{BidPlantTradeList.bidListDTO.bTypeCode}, 
				#{BidPlantTradeList.bidListDTO.announcedCode}, 
				#{BidPlantTradeList.bidListDTO.bTitle}, 
				#{BidPlantTradeList.bPlGroupcode}, 
				#{BidPlantTradeList.mId}, 
				#{BidPlantTradeList.bidListDTO.mId}, 
				#{BidPlantTradeList.bidListDTO.bRank}, 
				#{BidPlantTradeList.bidListDTO.bPrice}, 
				#{BidPlantTradeList.bidListDTO.sDepositRate}, 
				#{BidPlantTradeList.bidListDTO.bDeposit}, 
				NOW(), 
				ADDDATE(NOW(), INTERVAL ${tradePerioddate} DAY),
				NOW())
			</if> 
			<if test="BidComTradeList!=null">
				(sf_tr_pr_code(), 
				#{BidComTradeList.bidListDTO.bCode}, 
				#{BidComTradeList.bidListDTO.bTypeCode}, 
				#{BidComTradeList.bidListDTO.announcedCode}, 
				#{BidComTradeList.bidListDTO.bTitle}, 
				#{BidComTradeList.bCpGroupcode}, 
				#{BidComTradeList.mId}, 
				#{BidComTradeList.bidListDTO.mId}, 
				#{BidComTradeList.bidListDTO.bRank}, 
				#{BidComTradeList.bidListDTO.bPrice}, 
				#{BidComTradeList.bidListDTO.sDepositRate}, 
				#{BidComTradeList.bidListDTO.bDeposit}, 
				NOW(), 
				ADDDATE(NOW(), INTERVAL ${tradePerioddate} DAY),
				NOW())
			</if> 
	</insert>
	<update id="modifyRefund" parameterType="TradeDepositOutDTO">
		UPDATE tb_trade_deposit_out
		SET
			m_account_bank_name = #{mAccountBankName},
			m_account_number = #{mAccountNumber},
			m_account_name = #{mAccountName},
			tr_dep_date=NOW()
		WHERE 
			b_code = #{bCode}
	</update>
	<select id="getRefundDepDate" parameterType="String" resultType="String">
		SELECT 
		tr_dep_date
		FROM 
			tb_trade_deposit_out
		WHERE b_code=#{bCode}
	</select>
	<select id="getPriorityDate" parameterType="String" resultMap="tradePriorityResultMap">
		SELECT 
			tr_pr_conclusion_date1, 
			tr_pr_conclusion_date2
		FROM 
			tb_trade_priority
		WHERE
			b_code = #{bCode}
	</select>
</mapper>